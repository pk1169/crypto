package main

/*
#include "./sm4_c/sm4.c"
#include "./sm4_c/sm4.h"
*/
import "C"
import (
	"fmt"
	"unsafe"
)

func main() {
	type cbyte C.uchar
	var key = [16]cbyte{0xB1,0x22,0xAD,0x0A,0x7A,0x36,0x2E,0xC3,0xAB,0xA1,0xDD,0xEF,0xB3,0xAF,0x49,0x15}
	var iv = [16]cbyte{0x11,0x11,0x11,0x11,0xd1,0xa1,0x6c,0x20,0x67,0x70,0x8a,0xcb,0xd1,0xa1,0x6c,0x20}
	//var input = [32]cbyte{0x0B,0x0B,0x2B,0x4F,0x54,0x05,0xFE,0xF1,0xE8,0xA2,0x64,0xFC,0x89,0xAB,0x21,0x0A,
	//	0x0B,0x0B,0x2B,0x4F,0x54,0x05,0xFE,0xF1,0xE8,0xA2,0x64,0xFC,0x89,0xAB,0x21,0x0A}
	var len C.int = 32
	var output [32]cbyte

	var s  = "zxcvbnmasdfghjklqwertyuiop123456"
	var input1 [32]cbyte
	for k, value := range s {
		input1[k] = cbyte(value)
	}
	ctx := new(C.sm4_context)
	C.sm4_setkey_enc(ctx,(*C.uchar)(unsafe.Pointer(&key[0])))
	C.sm4_crypt_cbc(ctx,1,len,(*C.uchar)(unsafe.Pointer(&iv[0])),(*C.uchar)(unsafe.Pointer(&input1[0])),(*C.uchar)(unsafe.Pointer(&output[0])))

	fmt.Println(output)
}
